{"./":{"url":"./","title":"索引","keywords":"","body":"索引 Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2020-01-21 16:12:57 "},"designpatterns/":{"url":"designpatterns/","title":"设计模式","keywords":"","body":"设计模式 Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2019-12-27 11:37:43 "},"designpatterns/factory.html":{"url":"designpatterns/factory.html","title":"工厂","keywords":"","body":"简单工厂模式 又称静态工厂方法模式，工厂类封装new对象的细节，使用者通过传参给工厂类来获得相应对象。 组成： 工厂类角色（一个）：这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品。 抽象产品角色（一个）：它一般是具体产品继承的父类或者实现的接口。 具体产品角色（多个）：工厂类所创建的对象就是此角色的实例，在java中由一个具体类实现。 设计原则分析 每增加一种产品，创建一个具体产品角色，产品层面不违背开闭原则，但需要修改工厂类中创建产品的逻辑，工厂层面违背了开闭原则。且随着产品越来越多，工厂职责越来越重，违背了单一职责原则。 如： // 使用者 Logger LOGGER = LoggerFactory.getLogger(WebLogController.class); public static Logger getLogger(Class clazz) { Logger logger = getLogger(clazz.getName()); if (DETECT_LOGGER_NAME_MISMATCH) { Class autoComputedCallingClass = Util.getCallingClass(); if (autoComputedCallingClass != null && nonMatchingClasses(clazz, autoComputedCallingClass)) { Util.report(String.format(\"Detected logger name mismatch. Given name: \\\"%s\\\"; computed name: \\\"%s\\\".\", logger.getName(), autoComputedCallingClass.getName())); Util.report(\"See \" + LOGGER_NAME_MISMATCH_URL + \" for an explanation\"); } } return logger; } public static Logger getLogger(String name) { ILoggerFactory iLoggerFactory = getILoggerFactory(); return iLoggerFactory.getLogger(name); } // 使用者 Calendar calendar = Calendar.getInstance(); public static Calendar getInstance() { return createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT)); } private static Calendar createCalendar(TimeZone zone, Locale aLocale) { CalendarProvider provider = LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale) .getCalendarProvider(); if (provider != null) { try { return provider.getInstance(zone, aLocale); } catch (IllegalArgumentException iae) { // fall back to the default instantiation } } Calendar cal = null; if (aLocale.hasExtensions()) { String caltype = aLocale.getUnicodeLocaleType(\"ca\"); if (caltype != null) { switch (caltype) { case \"buddhist\": cal = new BuddhistCalendar(zone, aLocale); break; case \"japanese\": cal = new JapaneseImperialCalendar(zone, aLocale); break; case \"gregory\": cal = new GregorianCalendar(zone, aLocale); break; } } } if (cal == null) { // If no known calendar type is explicitly specified, // perform the traditional way to create a Calendar: // create a BuddhistCalendar for th_TH locale, // a JapaneseImperialCalendar for ja_JP_JP locale, or // a GregorianCalendar for any other locales. // NOTE: The language, country and variant strings are interned. if (aLocale.getLanguage() == \"th\" && aLocale.getCountry() == \"TH\") { cal = new BuddhistCalendar(zone, aLocale); } else if (aLocale.getVariant() == \"JP\" && aLocale.getLanguage() == \"ja\" && aLocale.getCountry() == \"JP\") { cal = new JapaneseImperialCalendar(zone, aLocale); } else { cal = new GregorianCalendar(zone, aLocale); } } return cal; } 工厂方法模式 工厂方法模式简单来讲就是简单工厂模式里集中在工厂类上的压力由工厂方法模式里不同的工厂子类来分担。 组成 抽象工厂角色（一个）： 这是本模式的核心，是具体工厂角色必须实现的接口或者必须继承的父类，在java中它由抽象类或者接口来实现。 具体工厂角色（多个）：它含有和具体业务逻辑有关的代码，由应用程序调用以创建对应的具体产品的对象。 抽象产品角色（一个）：它是具体产品继承的父类或者是实现的接口，在java中一般由抽象类或者接口来实现。 具体产品角色（多个）：具体工厂角色所创建的对象就是此角色的实例，在java中由具体的类来实现。 设计原则分析 当有新的具体产品产生时，只要按照抽象产品角色、抽象工厂角色提供的规则来生成具体产品角色和具体工厂角色，而不必去修改任何已有的代码。可以看出产品和工厂层面都是符合开闭原则的。每个具体工厂角色只负责创建对应的具体产品角色，不违背单一职责原则。 抽象工厂模式 多个抽象产品角色，每个抽象产品角色有多个具体产品角色的情况下，由一个具体工厂角色负责创建一系列相关或相互依赖的具体产品角色，而无需创建多个具体工厂角色。 组成 抽象工厂角色（一个）： 这是本模式的核心，是具体工厂角色必须实现的接口或者必须继承的父类，在java中它由抽象类或者接口来实现。 具体工厂角色（多个）：它含有和具体业务逻辑有关的代码，由应用程序调用以创建对应的具体产品的对象。 抽象产品角色（多个）：它是具体产品继承的父类或者是实现的接口，在java中一般由抽象类或者接口来实现。 具体产品角色（多个）：具体工厂角色所创建的对象就是此角色的实例，在java中由具体的类来实现。 比如空调这个抽象产品分为美的空调，海尔空调，格力空调，冰箱这个抽象产品分为美的冰箱，海尔冰箱，格力冰箱，洗衣机这个抽象产品分为美的洗衣机，海尔洗衣机，格力洗衣机，像美的空调，美的冰箱，美的洗衣机都属于美的品牌，那么就由一个美的工厂来负责生产这三个产品，而不需要美的空调工厂，美的冰箱工厂，美的洗衣机工厂3个工厂来处理。 设计原则分析 如果加入了一个新的抽象产品，那么从抽象工厂角色到具体工厂角色都要调整，违背了开闭原则。 Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2020-02-20 15:48:50 "},"designpatterns/singleton.html":{"url":"designpatterns/singleton.html","title":"单例","keywords":"","body":"单例 Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2019-12-31 15:58:40 "},"concurrent.html":{"url":"concurrent.html","title":"并发","keywords":"","body":"并发 Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2019-12-31 15:58:40 "},"oauth2/":{"url":"oauth2/","title":"Oauth2","keywords":"","body":"Oauth2 Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2019-12-27 11:37:43 "},"oauth2/websecurityconfigureradapter-yu-resourceserverconfigureradapter.html":{"url":"oauth2/websecurityconfigureradapter-yu-resourceserverconfigureradapter.html","title":"WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter","keywords":"","body":"WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter 1.1、spring security的过滤器链 spring security自己有一个叫FilterChainProxy代理类，该类实现了servlet接口。FilterChainProxy内部有一个List filterChains,在spring 的体系里有个order值（int型）越小优先级越高，filterChains是一个依据order的降序集合，优先级高的在前面，而SecurityFilterChain是一个接口也是一个chain，每个chain里有若干个filter，在spring security里一个请求只会被一个filter chain进行处理，也就是spring security通过遍历filterChains这个集合时，只要找到能处理该请求（servlet-path匹配，即uri中去掉context-path的部分）的filter chain就不再进行其他的filter chain匹配。 private List filterChains; private List getFilters(HttpServletRequest request) { Iterator var2 = this.filterChains.iterator(); SecurityFilterChain chain; do { if (!var2.hasNext()) { return null; } chain = (SecurityFilterChain)var2.next(); } while(!chain.matches(request)); // 找到匹配的chain后终止循环 return chain.getFilters(); } 1.2、二者顺序 默认的WebSecurityConfigurerAdapter的order是100 @Order(100) public abstract class WebSecurityConfigurerAdapter 而ResourceServerConfigurerAdapter实现类的@EnableResourceServer里导入了ResourceServerConfiguration， @Import({ResourceServerConfiguration.class}) public @interface EnableResourceServer { 该类里定义了order为3 public class ResourceServerConfiguration extends WebSecurityConfigurerAdapter implements Ordered { private int order = 3; 所以ResourceServerConfigurerAdapter的实现类优先级比另外一个的更高，在请求匹配的情况下以它为准，而WebSecurityConfigurerAdapter的实现类会失效。 如果想让WebSecurityConfigurerAdapter比ResourceServerConfigurerAdapter优先级高的话，只须要让前者的@Order值比后者的@Order值更小就行了。 @Order(1) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { 每声明一个*Adapter的实现类，都会产生一个filterChain。前面讲到一个request（匹配url）只能被一个filterChain处理，所以有二个Adapter的时候，在请求都匹配的情况下，优先级较低的会失效。 1.3、二者同时生效 根本在于让不同的Adapter匹配不同request（url） 实现时将细粒度较粗的优先级设低 @EnableWebSecuritypublic class MultiHttpSecurityConfig { @Configuration @EnableResourceServer public static class ResourceServerConfig extends ResourceServerConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http .antMatcher(\"/auth/**\") // 指定该Adapter只处理/auth/**的请求 .authorizeRequests() // 对该路径做更细的权限控制 .antMatchers(\"/admin/**\").hasAuthority(\"ROLE_ADMIN\") .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\") .anyRequest().authenticated(); } } @Configuration public static class WebSecurityConfig extends WebSecurityConfigurerAdapter { protected void configure(HttpSecurity http) throws Exception { http .authorizeRequests() // 因为它的顺序在上面的Adapter之后，所以实际是对/auth/**外的所有请求做权限的控制 .antMatchers(\"/actutor/**\").permitAll( .antMatchers(\"/admin/**\").hasAuthority(\"ROLE_ADMIN\") .anyRequest() .authenticated(); } } } 1.4、Tips spring security集成Oauth2后有个默认的AuthorizationServerSecurityConfiguration，其order为0，该类是对/oauth/token、/oauth/token_key、/oauth/check_token三个url做处理的 protected void configure(HttpSecurity http) throws Exception { AuthorizationServerSecurityConfigurer configurer = new AuthorizationServerSecurityConfigurer(); FrameworkEndpointHandlerMapping handlerMapping = this.endpoints.oauth2EndpointHandlerMapping(); http.setSharedObject(FrameworkEndpointHandlerMapping.class, handlerMapping); this.configure(configurer); http.apply(configurer); String tokenEndpointPath = handlerMapping.getServletPath(\"/oauth/token\"); String tokenKeyPath = handlerMapping.getServletPath(\"/oauth/token_key\"); String checkTokenPath = handlerMapping.getServletPath(\"/oauth/check_token\"); if (!this.endpoints.getEndpointsConfigurer().isUserDetailsServiceOverride()) { UserDetailsService userDetailsService = (UserDetailsService)http.getSharedObject(UserDetailsService.class); this.endpoints.getEndpointsConfigurer().userDetailsService(userDetailsService); } // /oauth/token的权限写死为fullyAuthenticated // /oauth/token_key、/oauth/check_token的权限则是可配的，默认为denyAll，可在实现AuthorizationServerConfigurerAdapter的配置类中修改 ((RequestMatcherConfigurer)((HttpSecurity)((AuthorizedUrl)((AuthorizedUrl)((AuthorizedUrl)http.authorizeRequests().antMatchers(new String[]{tokenEndpointPath})).fullyAuthenticated().antMatchers(new String[]{tokenKeyPath})).access(configurer.getTokenKeyAccess()).antMatchers(new String[]{checkTokenPath})).access(configurer.getCheckTokenAccess()).and()).requestMatchers().antMatchers(new String[]{tokenEndpointPath, tokenKeyPath, checkTokenPath})).and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER); http.setSharedObject(ClientDetailsService.class, this.clientDetailsService); } public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter { public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception { oauthServer .tokenKeyAccess(\"permitAll()\") .checkTokenAccess(\"isAuthenticated()\"); } } Copyright © cwcaowei 2020 all right reserved，powered by Gitbook该文章修改时间： 2019-12-31 15:58:40 "}}